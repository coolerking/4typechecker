package jp.freeex.fourtypes.client.q;

import java.util.ArrayList;
import java.util.List;

import jp.freeex.fourtypes.client.ClientUtils;
/**
 * 質問管理クラス。
 * @author tasuku
 */
public class QuestionManager {

	/**
	 * テスト１（王様・軍人指向/学者・職人指向）問題配列。
	 * 設問、A側（王様・軍人）回答、B側（学者・職人）回答の配列。
	 */
	public static final String[][] TROPISM_ARRAY = {
		{"新しいクラスや職場になったら、自分から入ろうとするグループは",
		"多人数で楽しそうなグループ",
		"気の合いそうな人がいるグループ"},
		{"気に入らないプレゼントをもらったとき、どう思う？",
		"気に入らなくても気持ちがうれしい",
		"ありがたいけど、内心は喜べない"},
		{"信頼していた人に裏切られた",
		"理由をみんなに相談する",
		"理由を本人から聞き出す"},
		{"パーティなどの集まりでは",
		"みんなでワイワイ遊びたい",
		"静かにじっくり語り合いたい"},
		{"親友の欠点に対しては",
		"言わずに許すのが本当の友達",
		"指摘してあげるのが本当の友達"},
		{"若いころのあなた、気の合わない初対面の人に対しては",
		"緊張してしゃべりまくった",
		"話題がみつからず、気まずくなった"},
		{"せっかくの大型連休に予定がない。ず～と一人で過ごすのは",
		"何だか取り残されてるみたいで不安",
		"大好き！ストレスにならない"},
		{"新歓やコンパのあとのカラオケ。選曲の時の基準は？",
		"他のメンバーがどんな曲を選ぶか",
		"自分の好きな曲、向いている曲"},
		{"あえて選ぶなら、親友とはどっちでしょう？",
		"今遊んだり相談したりできる人",
		"様々な思い出を共有している人"},
		{"友だちや恋人のセンスが、他人とかけはなれているとき",
		"もちろん気になる",
		"まったく気にならない"},
		{"気になる人ができた。どっちを考える？",
		"相手が自分に気があるか",
		"自分が相手にどれくらいほれているか"},
		{"子供のころ、叱られたりケンカすると",
		"駄々をこね、人前で大泣き", 
		"目立たない場所で泣いたり、すねたり"},
		{"グループ内でもめごとが。あなたにとってはどうでもいい問題の場合",
		"早く決着してほしいので多数派につく",
		"よく考えて結論を出す"},
		{"思わぬ臨時収入が入った。金額がちょうどなら",
		"自己投資に使いたい",
		"前から欲しかったものを買いたい"},
		{"同性から旅行に誘われた。一番気になるのは",
		"参加メンバー",
		"どこへ行くか"},
		{"予定外にあき時間ができた。そこへ親しくない人からパーティの誘い。",
		"これも自己投資だと思って、出かける",
		"自分のための時間として使う"},
		{"昔は、他人からどう見られることが多かった？",
		"人見知りしない",
		"人見知りする"},
		{"クラスや会社で、仲間同士を強調する熱いタイプに対して",
		"ノって話を合わせてあげる",
		"さからわないが、どうも苦手"},
		{"合格率の低い資格がとれた。まず友達に話すことは？",
		"どんなに受かるのが大変な資格か",
		"資格を使って何をしたいか"},
		{"子供の頃の、イヤな思い出は？",
		"叱られたり嫌われたりしたこと",
		"間違えたりできなかったこと"}
	};

	/**
	 * テスト２（王様・軍人）問題配列。
	 * 設問、A側（王様）回答、B側（軍人）回答の配列。
	 */
	public static final String[][] EXTROVERT_ARRAY = {
		{"どっちかというと？",
		"目立ちたがり",
		"仕切り屋"},
		{"泣いて頼まれたら？",
		"「イヤ」とは言えない",
		"みっともないと思ってしまう"},
		{"クラスで一番才能のある人とは？",
		"友だちになりたい",
		"ライバルとして認められたい"},
		{"好きな人に、「自分はほれられてる！」と実感できるのは",
		"全てが好きと言われる時",
		"相手の愛情の方が大きいと感じる時"},
		{"どんなプレゼントをあげたい？",
		"自分があげたいもの",
		"誰もが納得できる、価値あるもの"},
		{"「よし、明日からは早起きするぞ！」と宣言した。さてどうなる？",
		"三日で忘れる",
		"言った限りは守る"},
		{"恋人とそろそろ危ないカンジ。別れるなら、どうする？",
		"別の人を好きになりフェードアウト",
		"相手が言いだす前に切り出す"},
		{"子供のころ　遊ぶ時は",
		"気の合う友達を誘って遊んだ",
		"得意な遊びに友達を誘った"},
		{"かなえたい夢へのアプローチ方法は",
		"有言実行",
		"実現の可能性が高くなるまで言わない"},
		{"先輩からは　同輩に比べ自分の方が",
		"目をかけてもらえるとうれしい",
		"評価されると嬉しい"},
		{"後輩からは、自分がどう思われているとわかったらショック？",
		"怖がられ、嫌われている",
		"バカにされ、みくびられている"},
		{"買物で迷っている時、有効な店員のひと押しの言葉とは？",
		"「お似合い」「今売れてる」",
		"「最新型」「限定」「お買い得」"}
	};
	
	/**
	 * テスト3（学者・職人）問題配列。
	 * 設問、A側（学者）回答、B側（職人）回答の配列。
	 */
	public static final String[][] INTROVERT_ARRAY = {
		{"どっちかというと？",
		"話すより聞く方が好き",
		"聞くのも好きだけど、熱く語るのも好き"},
		{"恋人とはどんな関係が理想？",
		"一緒にいて落ちつく関係",
		"お互いのすべてをわかりあう関係"},
		{"趣味にはまることがある？",
		"特になにかに熱中できない",
		"熱く語りたい趣味がいくつかある"},
		{"クラスの人気者や中心人物をどう思う？",
		"自分とは関係ない人",
		"なんとなく憧れてしまう"},
		{"こういう「性格テスト」をどう思う？",
		"鵜呑みにはしないが興味はある",
		"人間はタイプ分けなどできないはず"},
		{"自分のことを好きか？",
		"そんなことは考えない",
		"時々、すごくイヤになる"},
		{"好きな人ができた。さてどうなる？",
		"なぜ好きか、どこが好きか考える",
		"自分の気持ちが止まらなくなる"},
		{"小さい子供のころ、ものすごく好きなおもちゃやグッズなどがあった？",
		"特になかった",
		"手放せず、無いと泣いたりした"},
		{"買物で、買う・買わないの基準は？",
		"必要・無難・効率・手頃",
		"好き・自分らしい・かっこいい"},
		{"あなたの説明、わからないと言われるときの理由はどっち？",
		"合ってるけどミもフタもない",
		"長くてまどろっこしい"},
		{"ノルマ・〆切などの言葉をきくと思い浮かべるイメージは？",
		"調整・段取り・計画・工夫",
		"管理・数字・賞罰・成果"},
		{"あなたがすごくイヤだと感じるのは、どっち？",
		"指示ミスで仕事がムダになる",
		"間違っていると思う事を強制される"}
	};

	/**
	 * QuestionManagerインスタンス
	 */
	private static QuestionManager manager = new QuestionManager();

	/**
	 * デフォルトコンストラクタ。処理なし。
	 */
	private QuestionManager(){}

	/**
	 * QuestionManagerインスタンスを取得する。
	 * @return QuestionManager インスタンス
	 */
	public static final QuestionManager getInstance(){
		return manager;
	}

	/**
	 * 向性テスト質問リストを取得する。
	 * 利用者のなれをなるべく避けるため、質問のならびを呼び出しのたびに変化させている。
	 * @return List<Question> 向性テスト質問リスト
	 */
	public List<Question> getTripismQuestions(){
		return getQuestions(TROPISM_ARRAY);
	}

	/**
	 * 注目型／司令型テスト質問リストを取得する。
	 * 利用者のなれをなるべく避けるため、質問のならびを呼び出しのたびに変化させている。
	 * @return List<Question> 注目型／司令型テスト質問リスト
	 */
	public List<Question> getExtrovertQuestions(){
		return getQuestions(EXTROVERT_ARRAY);
	}

	/**
	 * 法則型／理想型テスト質問リストを取得する。
	 * 利用者のなれをなるべく避けるため、質問のならびを呼び出しのたびに変化させている。
	 * @return List<Question> 法則型／理想型テスト質問リスト
	 */
	public List<Question> getIntrovertQuestions(){
		return getQuestions(INTROVERT_ARRAY);
	}

	/**
	 * 引数で渡された質問情報を、利用者のなれをなるべく避けるため、
	 * 質問のならびを呼び出しのたびに変化させた質問リストに加工する。
	 * @param array 質問情報
	 * @return 質問リスト（毎回回答が異なる）
	 */
	private List<Question> getQuestions(String[][] array){
		List<Question> questions = new ArrayList<Question>();
		int[] orders = ClientUtils.createOrderArray(array.length);
		for(int pos=0;pos<orders.length;pos++){
			questions.add(
				new Question(
					"Q." + (pos+1) + " " +array[orders[pos]][0],
					array[orders[pos]][1],
					array[orders[pos]][2]
				)
			);
		}
		return questions;
	}
}
